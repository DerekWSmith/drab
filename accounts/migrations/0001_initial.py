# Generated by Django 4.2.21 on 2025-06-06 00:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('subscription_active', models.BooleanField(blank=True, default=True, null=True)),
                ('subscription_type', models.TextField(blank=True, default='', null=True)),
                ('subscription_start_date', models.DateField(blank=True, null=True)),
                ('subscription_renewal_date', models.DateField(blank=True, null=True)),
                ('subscription_notes', models.TextField(blank=True, default='', null=True)),
                ('is_out_of_office', models.BooleanField(default=False)),
                ('out_of_office_until', models.DateTimeField(blank=True, null=True)),
                ('contact_details', models.TextField(blank=True, default='', null=True)),
                ('preferred_name', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('street_name', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('suburb', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('city', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('state', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('postcode', models.CharField(blank=True, default='', max_length=5, null=True)),
                ('phone', models.CharField(blank=True, default='', max_length=15, null=True)),
                ('allow_public', models.BooleanField(blank=True, default=False, null=True)),
                ('allow_same_domain', models.BooleanField(blank=True, default=False, null=True)),
                ('allow_same_country', models.BooleanField(blank=True, default=False, null=True)),
                ('allow_same_region', models.BooleanField(blank=True, default=False, null=True)),
                ('allow_same_locality', models.BooleanField(blank=True, default=False, null=True)),
                ('allow_same_postcode', models.BooleanField(blank=True, default=False, null=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['email'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('is_auto', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_groups',
                'unique_together': {('name', 'creator')},
            },
        ),
        migrations.CreateModel(
            name='SubscriptionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('code', models.CharField(max_length=20)),
                ('label', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'SubscriptionTypes',
            },
        ),
        migrations.CreateModel(
            name='UserBlocklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('blocked_user', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='blocked_by_users', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='blocked_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'userblocklist',
            },
        ),
        migrations.CreateModel(
            name='UserAcceptlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('accepted_user', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='accepted_by_users', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='accepted_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'useracceptlist',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='acceptable',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Users who can invite this user to join a group.', related_query_name='approved_inviters', through='accounts.UserAcceptlist', to=settings.AUTH_USER_MODEL, verbose_name='Users allowed to invite'),
        ),
        migrations.AddField(
            model_name='user',
            name='blocklist',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='Users who have been blocked by this user.', related_query_name='blocked_contacts', through='accounts.UserBlocklist', to=settings.AUTH_USER_MODEL, verbose_name='Users not allowed to make contact'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='subscription',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Default code = default ', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='users', to='accounts.subscriptiontype', verbose_name='Subscription type'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_read', models.DateTimeField(blank=True, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, default='')),
                ('group', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='accounts.group')),
                ('user', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'group_memberships',
                'unique_together': {('user', 'group')},
            },
        ),
    ]
